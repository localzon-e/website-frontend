{"version":3,"sources":["webpack:///./node_modules/ol/render/EventType.js","webpack:///./node_modules/ol/renderer/Map.js","webpack:///./node_modules/ol/renderer/Composite.js","webpack:///./node_modules/ol/proj/Projection.js","webpack:///./node_modules/ol/proj/epsg3857.js","webpack:///./node_modules/ol/proj/epsg4326.js","webpack:///./node_modules/ol/proj/projections.js","webpack:///./node_modules/ol/proj/transforms.js","webpack:///./node_modules/ol/proj.js","webpack:///./node_modules/ol/render/Event.js","webpack:///./node_modules/ol/renderer/Layer.js","webpack:///./node_modules/ol/renderer/canvas/Layer.js","webpack:///./node_modules/ol/renderer/canvas/TileLayer.js","webpack:///./node_modules/ol/render/Box.js","webpack:///./node_modules/ol/pointer/EventType.js","webpack:///./node_modules/ol/render/canvas.js","webpack:///./node_modules/ol/proj/Units.js"],"names":["PRERENDER","POSTRENDER","PRECOMPOSE","POSTCOMPOSE","RENDERCOMPLETE","__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__","this","constructor","create","_super","MapRenderer","map","_this","map_","dispatchRenderEvent","type","frameState","calculateMatrices2D","viewState","coordinateToPixelTransform","pixelToCoordinateTransform","size","resolution","rotation","center","forEachFeatureAtCoordinate","coordinate","hitTolerance","checkWrapped","callback","thisArg","layerFilter","thisArg2","result","managed","feature","layer","geometry","projection","translatedCoordinate","slice","offsets","canWrapX","projectionExtent","getExtent","worldWidth","push","layerStates","layerStatesArray","numLayers","length","matches","tmpCoord","i","j","layerState","hasRenderer","layerRenderer","getRenderer","source","getSource","coordinates","getWrapX","callback_1","bind","order","forEach","m","distanceSq","sort","a","some","forEachLayerAtPixel","pixel","hasFeatureAtCoordinate","hasFeature","undefined","getMap","renderFrame","scheduleExpireIconCache","canExpireCache","postRenderFunctions","expireIconCache","Disposable","expire","Map","CompositeMapRenderer","fontChangeListenerKey_","ObjectEventType","PROPERTYCHANGE","redrawText","element_","document","createElement","style","position","width","height","zIndex","className","container","getViewport","insertBefore","firstChild","children_","renderedVisible_","hasListener","event_1","dispatchEvent","disposeInternal","parentNode","removeChild","declutterLayers","previousElement","ii","layerIndex","sourceState","READY","UNDEFINED","element","render","renderDeclutter","display","data","getDataAtPixel","Projection","options","code_","code","units_","extent_","extent","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","getCode","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc","RADIUS","HALF_SIZE","Math","PI","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","log","tan","EPSG3857Projection","units","Units","METERS","point","PROJECTIONS","fromEPSG4326","input","opt_output","opt_dimension","dimension","output","y","toEPSG4326","atan","exp","METERS_PER_UNIT","EPSG4326Projection","opt_axisOrientation","DEGREES","cache","get","replace","add","transforms","destination","transformFn","sourceCode","destinationCode","transform","cloneTransform","identityTransform","addProjection","addProjections","projections","projectionLike","opt_units","pointResolution","getter","toEPSG4326_1","getTransformFromProjections","vertices","addEquivalentProjections","addEquivalentTransforms","projections1","projections2","forwardTransform","inverseTransform","projection1","projection2","createProjection","defaultCode","fromLonLat","opt_projection","equivalent","equalUnits","transformFunc","sourceProjection","destinationProjection","getTransform","transformExtent","opt_stops","userProjection","getUserProjection","toUserCoordinate","fromUserCoordinate","destProjection","toUserExtent","fromUserExtent","addCommon","RenderEvent","opt_inversePixelTransform","opt_frameState","opt_context","inversePixelTransform","context","LayerRenderer","boundHandleImageChange_","handleImageChange_","layer_","declutterExecutorGroup","getFeatures","prepareFrame","target","loadedTileCallback","tiles","zoom","tile","tileCoord","toString","createLoadedTileFinder","tileRange","forEachLoadedTile","getLayer","handleFontsChanged","event","image","getState","ImageState","LOADED","renderIfReadyAndVisible","loadImage","imageState","ERROR","addEventListener","EventType","CHANGE","IDLE","load","getVisible","getSourceState","changed","Observable","Layer","CanvasLayerRenderer","renderedResolution","tempTransform","pixelTransform","containerReused","useContainer","opacity","layerClassName","getClassName","canvas","firstElementChild","HTMLCanvasElement","getContext","appendChild","left","transformOrigin","clip","pixelRatio","halfWidth","halfHeight","topLeft","topRight","bottomRight","bottomLeft","save","beginPath","moveTo","lineTo","clipUnrotated","inverted","round","dispatchRenderEvent_","preRender","postRender","getRenderTransform","offsetX","dx1","dy1","sx","sy","dx2","dy2","renderPixel","layerExtent","renderCoordinate","x","newCanvas","newContext","clearRect","drawImage","getImageData","err","name","Uint8Array","CanvasTileLayerRenderer","tileLayer","extentChanged","renderedExtent_","renderedPixelRatio","renderedProjection","renderedRevision","renderedTiles","newTiles_","tmpExtent","tmpTileRange_","TileRange","isDrawableTile","tileState","useInterimTilesOnError","getUseInterimTilesOnError","TileState","EMPTY","getTile","z","tileSource","getPreload","setState","getInterimTile","viewResolution","viewCenter","sourceRevision","getRevision","getTileGridForProjection","getZForResolution","zDirection","tileResolution","getResolution","tilePixelRatio","getTilePixelRatio","sqrt","dx","dy","canvasExtent","getTileRangeForExtentAndZ","tilesToDrawByZ","findLoadedTiles","tmpTileRange","minX","maxX","minY","maxY","uid","inTransition","indexOf","getAlpha","time","childTileRange","getTileCoordChildTileRange","covered","forEachTileCoordParentTileRange","canvasScale","canvasTransform","getContextOptions","clips","clipZs","currentClip","zs","keys","Number","getOpaque","reverse","currentZ","currentTilePixelSize","getTilePixelSize","currentResolution","currentScale","dx_1","dy_1","originTileCoord","getTileCoordForCoordAndZ","originTileExtent","getTileCoordExtent","origin_1","tileGutter","getGutterForProjection","tilesToDraw","tileCoordKey","floatX","nextX","floatY","nextY","w","h","transition","i_1","drawTileImage","restore","updateUsedTiles","usedTiles","manageTilePyramid","scheduleExpireCache","gutter","getTileImage","tileAlpha","alpha","alphaChanged","globalAlpha","animate","endTransition","getImage","postRenderFunction","tileSourceKey","expireCache","getKey","preload","opt_tileCallback","wantedTiles","tileQueue","minZoom","getMinZoom","tileCount","isKeyQueued","enqueue","getTileCoordCenter","useTile","updateCacheSize","RenderBox","geometry_","pointerEvents","startPixel_","endPixel_","setMap","render_","startPixel","endPixel","px","min","top","abs","getOverlayContainer","setPixels","createOrUpdateGeometry","pixels","getCoordinateFromPixelInternal","setCoordinates","getGeometry","POINTERMOVE","POINTERDOWN","POINTERUP","POINTEROVER","POINTEROUT","POINTERENTER","POINTERLEAVE","POINTERCANCEL","checkedFonts","labelCache","setSize","console","warn","measureFont","measureContext","textHeights","interval","referenceWidth","retries","referenceFonts","len","text","isAvailable","fontStyle","fontWeight","fontFamily","available","referenceFont","measureTextWidth","check","done","fonts","getKeys","font","apply","split","set","clearInterval","div","measureText","rotateAtOffset","offsetY","translate","rotate","createTransformStringCanvas","createTransformString","FEET","PIXELS","TILE_PIXELS","USFEET"],"mappings":"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","file":"js/chunk-vendors~a57fface.4984daea.js","sourcesContent":["/**\n * @module ol/render/EventType\n */\n/**\n * @enum {string}\n */\nexport default {\n    /**\n     * Triggered before a layer is rendered.\n     * @event module:ol/render/Event~RenderEvent#prerender\n     * @api\n     */\n    PRERENDER: 'prerender',\n    /**\n     * Triggered after a layer is rendered.\n     * @event module:ol/render/Event~RenderEvent#postrender\n     * @api\n     */\n    POSTRENDER: 'postrender',\n    /**\n     * Triggered before layers are rendered.\n     * The event object will not have a `context` set.\n     * @event module:ol/render/Event~RenderEvent#precompose\n     * @api\n     */\n    PRECOMPOSE: 'precompose',\n    /**\n     * Triggered after all layers are rendered.\n     * The event object will not have a `context` set.\n     * @event module:ol/render/Event~RenderEvent#postcompose\n     * @api\n     */\n    POSTCOMPOSE: 'postcompose',\n    /**\n     * Triggered when rendering is complete, i.e. all sources and tiles have\n     * finished loading for the current viewport, and all tiles are faded in.\n     * The event object will not have a `context` set.\n     * @event module:ol/render/Event~RenderEvent#rendercomplete\n     * @api\n     */\n    RENDERCOMPLETE: 'rendercomplete',\n};\n//# sourceMappingURL=EventType.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/Map\n */\nimport Disposable from '../Disposable.js';\nimport { TRUE } from '../functions.js';\nimport { abstract } from '../util.js';\nimport { compose as composeTransform, makeInverse } from '../transform.js';\nimport { getWidth } from '../extent.js';\nimport { shared as iconImageCache } from '../style/IconImageCache.js';\nimport { inView } from '../layer/Layer.js';\nimport { wrapX } from '../coordinate.js';\n/**\n * @typedef HitMatch\n * @property {import(\"../Feature.js\").FeatureLike} feature\n * @property {import(\"../layer/Layer.js\").default} layer\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\n * @property {number} distanceSq\n * @property {import(\"./vector.js\").FeatureCallback<T>} callback\n * @template T\n */\n/**\n * @abstract\n */\nvar MapRenderer = /** @class */ (function (_super) {\n    __extends(MapRenderer, _super);\n    /**\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    function MapRenderer(map) {\n        var _this = _super.call(this) || this;\n        /**\n         * @private\n         * @type {import(\"../PluggableMap.js\").default}\n         */\n        _this.map_ = map;\n        return _this;\n    }\n    /**\n     * @abstract\n     * @param {import(\"../render/EventType.js\").default} type Event type.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    MapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {\n        abstract();\n    };\n    /**\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n     * @protected\n     */\n    MapRenderer.prototype.calculateMatrices2D = function (frameState) {\n        var viewState = frameState.viewState;\n        var coordinateToPixelTransform = frameState.coordinateToPixelTransform;\n        var pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;\n        composeTransform(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);\n        makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);\n    };\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {boolean} checkWrapped Check for wrapped geometries.\n     * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {S} thisArg Value to use as `this` when executing `callback`.\n     * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n     *     function, only layers which are visible and for which this function\n     *     returns `true` will be tested for features.  By default, all visible\n     *     layers will be tested.\n     * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.\n     * @return {T|undefined} Callback result.\n     * @template S,T,U\n     */\n    MapRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {\n        var result;\n        var viewState = frameState.viewState;\n        /**\n         * @param {boolean} managed Managed layer.\n         * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../layer/Layer.js\").default} layer Layer.\n         * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n         * @return {T|undefined} Callback result.\n         */\n        function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {\n            return callback.call(thisArg, feature, managed ? layer : null, geometry);\n        }\n        var projection = viewState.projection;\n        var translatedCoordinate = wrapX(coordinate.slice(), projection);\n        var offsets = [[0, 0]];\n        if (projection.canWrapX() && checkWrapped) {\n            var projectionExtent = projection.getExtent();\n            var worldWidth = getWidth(projectionExtent);\n            offsets.push([-worldWidth, 0], [worldWidth, 0]);\n        }\n        var layerStates = frameState.layerStatesArray;\n        var numLayers = layerStates.length;\n        var matches = /** @type {Array<HitMatch<T>>} */ ([]);\n        var tmpCoord = [];\n        for (var i = 0; i < offsets.length; i++) {\n            for (var j = numLayers - 1; j >= 0; --j) {\n                var layerState = layerStates[j];\n                var layer = layerState.layer;\n                if (layer.hasRenderer() &&\n                    inView(layerState, viewState) &&\n                    layerFilter.call(thisArg2, layer)) {\n                    var layerRenderer = layer.getRenderer();\n                    var source = layer.getSource();\n                    if (layerRenderer && source) {\n                        var coordinates = source.getWrapX()\n                            ? translatedCoordinate\n                            : coordinate;\n                        var callback_1 = forEachFeatureAtCoordinate.bind(null, layerState.managed);\n                        tmpCoord[0] = coordinates[0] + offsets[i][0];\n                        tmpCoord[1] = coordinates[1] + offsets[i][1];\n                        result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback_1, matches);\n                    }\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n        }\n        if (matches.length === 0) {\n            return undefined;\n        }\n        var order = 1 / matches.length;\n        matches.forEach(function (m, i) { return (m.distanceSq += i * order); });\n        matches.sort(function (a, b) { return a.distanceSq - b.distanceSq; });\n        matches.some(function (m) {\n            return (result = m.callback(m.feature, m.layer, m.geometry));\n        });\n        return result;\n    };\n    /**\n     * @abstract\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {function(import(\"../layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer\n     *     callback.\n     * @param {function(import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n     *     function, only layers which are visible and for which this function\n     *     returns `true` will be tested for features.  By default, all visible\n     *     layers will be tested.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    MapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {\n        return abstract();\n    };\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {boolean} checkWrapped Check for wrapped geometries.\n     * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n     *     function, only layers which are visible and for which this function\n     *     returns `true` will be tested for features.  By default, all visible\n     *     layers will be tested.\n     * @param {U} thisArg Value to use as `this` when executing `layerFilter`.\n     * @return {boolean} Is there a feature at the given coordinate?\n     * @template U\n     */\n    MapRenderer.prototype.hasFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {\n        var hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, TRUE, this, layerFilter, thisArg);\n        return hasFeature !== undefined;\n    };\n    /**\n     * @return {import(\"../PluggableMap.js\").default} Map.\n     */\n    MapRenderer.prototype.getMap = function () {\n        return this.map_;\n    };\n    /**\n     * Render.\n     * @abstract\n     * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    MapRenderer.prototype.renderFrame = function (frameState) {\n        abstract();\n    };\n    /**\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    MapRenderer.prototype.scheduleExpireIconCache = function (frameState) {\n        if (iconImageCache.canExpireCache()) {\n            frameState.postRenderFunctions.push(expireIconCache);\n        }\n    };\n    return MapRenderer;\n}(Disposable));\n/**\n * @param {import(\"../PluggableMap.js\").default} map Map.\n * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n */\nfunction expireIconCache(map, frameState) {\n    iconImageCache.expire();\n}\nexport default MapRenderer;\n//# sourceMappingURL=Map.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/Composite\n */\nimport MapRenderer from './Map.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RenderEvent from '../render/Event.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\nimport { CLASS_UNSELECTABLE } from '../css.js';\nimport { checkedFonts } from '../render/canvas.js';\nimport { inView } from '../layer/Layer.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceChildren } from '../dom.js';\n/**\n * @classdesc\n * Canvas map renderer.\n * @api\n */\nvar CompositeMapRenderer = /** @class */ (function (_super) {\n    __extends(CompositeMapRenderer, _super);\n    /**\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    function CompositeMapRenderer(map) {\n        var _this = _super.call(this, map) || this;\n        /**\n         * @type {import(\"../events.js\").EventsKey}\n         */\n        _this.fontChangeListenerKey_ = listen(checkedFonts, ObjectEventType.PROPERTYCHANGE, map.redrawText.bind(map));\n        /**\n         * @private\n         * @type {HTMLDivElement}\n         */\n        _this.element_ = document.createElement('div');\n        var style = _this.element_.style;\n        style.position = 'absolute';\n        style.width = '100%';\n        style.height = '100%';\n        style.zIndex = '0';\n        _this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';\n        var container = map.getViewport();\n        container.insertBefore(_this.element_, container.firstChild || null);\n        /**\n         * @private\n         * @type {Array<HTMLElement>}\n         */\n        _this.children_ = [];\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.renderedVisible_ = true;\n        return _this;\n    }\n    /**\n     * @param {import(\"../render/EventType.js\").default} type Event type.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    CompositeMapRenderer.prototype.dispatchRenderEvent = function (type, frameState) {\n        var map = this.getMap();\n        if (map.hasListener(type)) {\n            var event_1 = new RenderEvent(type, undefined, frameState);\n            map.dispatchEvent(event_1);\n        }\n    };\n    CompositeMapRenderer.prototype.disposeInternal = function () {\n        unlistenByKey(this.fontChangeListenerKey_);\n        this.element_.parentNode.removeChild(this.element_);\n        _super.prototype.disposeInternal.call(this);\n    };\n    /**\n     * Render.\n     * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    CompositeMapRenderer.prototype.renderFrame = function (frameState) {\n        if (!frameState) {\n            if (this.renderedVisible_) {\n                this.element_.style.display = 'none';\n                this.renderedVisible_ = false;\n            }\n            return;\n        }\n        this.calculateMatrices2D(frameState);\n        this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);\n        var layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {\n            return a.zIndex - b.zIndex;\n        });\n        var viewState = frameState.viewState;\n        this.children_.length = 0;\n        /**\n         * @type {Array<import(\"../layer/BaseVector.js\").default>}\n         */\n        var declutterLayers = [];\n        var previousElement = null;\n        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n            var layerState = layerStatesArray[i];\n            frameState.layerIndex = i;\n            if (!inView(layerState, viewState) ||\n                (layerState.sourceState != SourceState.READY &&\n                    layerState.sourceState != SourceState.UNDEFINED)) {\n                continue;\n            }\n            var layer = layerState.layer;\n            var element = layer.render(frameState, previousElement);\n            if (!element) {\n                continue;\n            }\n            if (element !== previousElement) {\n                this.children_.push(element);\n                previousElement = element;\n            }\n            if ('getDeclutter' in layer) {\n                declutterLayers.push(layer);\n            }\n        }\n        for (var i = declutterLayers.length - 1; i >= 0; --i) {\n            declutterLayers[i].renderDeclutter(frameState);\n        }\n        replaceChildren(this.element_, this.children_);\n        this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);\n        if (!this.renderedVisible_) {\n            this.element_.style.display = '';\n            this.renderedVisible_ = true;\n        }\n        this.scheduleExpireIconCache(frameState);\n    };\n    /**\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {function(import(\"../layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback Layer\n     *     callback.\n     * @param {function(import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n     *     function, only layers which are visible and for which this function\n     *     returns `true` will be tested for features.  By default, all visible\n     *     layers will be tested.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    CompositeMapRenderer.prototype.forEachLayerAtPixel = function (pixel, frameState, hitTolerance, callback, layerFilter) {\n        var viewState = frameState.viewState;\n        var layerStates = frameState.layerStatesArray;\n        var numLayers = layerStates.length;\n        for (var i = numLayers - 1; i >= 0; --i) {\n            var layerState = layerStates[i];\n            var layer = layerState.layer;\n            if (layer.hasRenderer() &&\n                inView(layerState, viewState) &&\n                layerFilter(layer)) {\n                var layerRenderer = layer.getRenderer();\n                var data = layerRenderer.getDataAtPixel(pixel, frameState, hitTolerance);\n                if (data) {\n                    var result = callback(layer, data);\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n        }\n        return undefined;\n    };\n    return CompositeMapRenderer;\n}(MapRenderer));\nexport default CompositeMapRenderer;\n//# sourceMappingURL=Composite.js.map","/**\n * @module ol/proj/Projection\n */\nimport { METERS_PER_UNIT } from './Units.js';\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").default|string} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `{number}` view resolution and an `{import(\"../coordinate.js\").Coordinate}` as arguments, and returns\n * the `{number}` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj#getPointResolution} function will be used.\n */\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj~get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4~register} function.\n *\n * @api\n */\nvar Projection = /** @class */ (function () {\n    /**\n     * @param {Options} options Projection options.\n     */\n    function Projection(options) {\n        /**\n         * @private\n         * @type {string}\n         */\n        this.code_ = options.code;\n        /**\n         * Units of projected coordinates. When set to `TILE_PIXELS`, a\n         * `this.extent_` and `this.worldExtent_` must be configured properly for each\n         * tile.\n         * @private\n         * @type {import(\"./Units.js\").default}\n         */\n        this.units_ = /** @type {import(\"./Units.js\").default} */ (options.units);\n        /**\n         * Validity extent of the projection in projected coordinates. For projections\n         * with `TILE_PIXELS` units, this is the extent of the tile in\n         * tile pixel space.\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.extent_ = options.extent !== undefined ? options.extent : null;\n        /**\n         * Extent of the world in EPSG:4326. For projections with\n         * `TILE_PIXELS` units, this is the extent of the tile in\n         * projected coordinate space.\n         * @private\n         * @type {import(\"../extent.js\").Extent}\n         */\n        this.worldExtent_ =\n            options.worldExtent !== undefined ? options.worldExtent : null;\n        /**\n         * @private\n         * @type {string}\n         */\n        this.axisOrientation_ =\n            options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.global_ = options.global !== undefined ? options.global : false;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.canWrapX_ = !!(this.global_ && this.extent_);\n        /**\n         * @private\n         * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n         */\n        this.getPointResolutionFunc_ = options.getPointResolution;\n        /**\n         * @private\n         * @type {import(\"../tilegrid/TileGrid.js\").default}\n         */\n        this.defaultTileGrid_ = null;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        this.metersPerUnit_ = options.metersPerUnit;\n    }\n    /**\n     * @return {boolean} The projection is suitable for wrapping the x-axis\n     */\n    Projection.prototype.canWrapX = function () {\n        return this.canWrapX_;\n    };\n    /**\n     * Get the code for this projection, e.g. 'EPSG:4326'.\n     * @return {string} Code.\n     * @api\n     */\n    Projection.prototype.getCode = function () {\n        return this.code_;\n    };\n    /**\n     * Get the validity extent for this projection.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    Projection.prototype.getExtent = function () {\n        return this.extent_;\n    };\n    /**\n     * Get the units of this projection.\n     * @return {import(\"./Units.js\").default} Units.\n     * @api\n     */\n    Projection.prototype.getUnits = function () {\n        return this.units_;\n    };\n    /**\n     * Get the amount of meters per unit of this projection.  If the projection is\n     * not configured with `metersPerUnit` or a units identifier, the return is\n     * `undefined`.\n     * @return {number|undefined} Meters.\n     * @api\n     */\n    Projection.prototype.getMetersPerUnit = function () {\n        return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n    };\n    /**\n     * Get the world extent for this projection.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n    Projection.prototype.getWorldExtent = function () {\n        return this.worldExtent_;\n    };\n    /**\n     * Get the axis orientation of this projection.\n     * Example values are:\n     * enu - the default easting, northing, elevation.\n     * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n     *     or south orientated transverse mercator.\n     * wnu - westing, northing, up - some planetary coordinate systems have\n     *     \"west positive\" coordinate systems\n     * @return {string} Axis orientation.\n     * @api\n     */\n    Projection.prototype.getAxisOrientation = function () {\n        return this.axisOrientation_;\n    };\n    /**\n     * Is this projection a global projection which spans the whole world?\n     * @return {boolean} Whether the projection is global.\n     * @api\n     */\n    Projection.prototype.isGlobal = function () {\n        return this.global_;\n    };\n    /**\n     * Set if the projection is a global projection which spans the whole world\n     * @param {boolean} global Whether the projection is global.\n     * @api\n     */\n    Projection.prototype.setGlobal = function (global) {\n        this.global_ = global;\n        this.canWrapX_ = !!(global && this.extent_);\n    };\n    /**\n     * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n     */\n    Projection.prototype.getDefaultTileGrid = function () {\n        return this.defaultTileGrid_;\n    };\n    /**\n     * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n     */\n    Projection.prototype.setDefaultTileGrid = function (tileGrid) {\n        this.defaultTileGrid_ = tileGrid;\n    };\n    /**\n     * Set the validity extent for this projection.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @api\n     */\n    Projection.prototype.setExtent = function (extent) {\n        this.extent_ = extent;\n        this.canWrapX_ = !!(this.global_ && extent);\n    };\n    /**\n     * Set the world extent for this projection.\n     * @param {import(\"../extent.js\").Extent} worldExtent World extent\n     *     [minlon, minlat, maxlon, maxlat].\n     * @api\n     */\n    Projection.prototype.setWorldExtent = function (worldExtent) {\n        this.worldExtent_ = worldExtent;\n    };\n    /**\n     * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}\n     * for this projection.\n     * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n     * @api\n     */\n    Projection.prototype.setGetPointResolution = function (func) {\n        this.getPointResolutionFunc_ = func;\n    };\n    /**\n     * Get the custom point resolution function for this projection (if set).\n     * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n     * resolution function (if set).\n     */\n    Projection.prototype.getPointResolutionFunc = function () {\n        return this.getPointResolutionFunc_;\n    };\n    return Projection;\n}());\nexport default Projection;\n//# sourceMappingURL=Projection.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { cosh } from '../math.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = /** @class */ (function (_super) {\n    __extends(EPSG3857Projection, _super);\n    /**\n     * @param {string} code Code.\n     */\n    function EPSG3857Projection(code) {\n        return _super.call(this, {\n            code: code,\n            units: Units.METERS,\n            extent: EXTENT,\n            global: true,\n            worldExtent: WORLD_EXTENT,\n            getPointResolution: function (resolution, point) {\n                return resolution / cosh(point[1] / RADIUS);\n            },\n        }) || this;\n    }\n    return EPSG3857Projection;\n}(Projection));\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [\n    new EPSG3857Projection('EPSG:3857'),\n    new EPSG3857Projection('EPSG:102100'),\n    new EPSG3857Projection('EPSG:102113'),\n    new EPSG3857Projection('EPSG:900913'),\n    new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n    var length = input.length;\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var output = opt_output;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        }\n        else {\n            output = new Array(length);\n        }\n    }\n    for (var i = 0; i < length; i += dimension) {\n        output[i] = (HALF_SIZE * input[i]) / 180;\n        var y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n        if (y > MAX_SAFE_Y) {\n            y = MAX_SAFE_Y;\n        }\n        else if (y < -MAX_SAFE_Y) {\n            y = -MAX_SAFE_Y;\n        }\n        output[i + 1] = y;\n    }\n    return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n    var length = input.length;\n    var dimension = opt_dimension > 1 ? opt_dimension : 2;\n    var output = opt_output;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        }\n        else {\n            output = new Array(length);\n        }\n    }\n    for (var i = 0; i < length; i += dimension) {\n        output[i] = (180 * input[i]) / HALF_SIZE;\n        output[i + 1] =\n            (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n    }\n    return output;\n}\n//# sourceMappingURL=epsg3857.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-180, -90, 180, 90];\n/**\n * @const\n * @type {number}\n */\nexport var METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nvar EPSG4326Projection = /** @class */ (function (_super) {\n    __extends(EPSG4326Projection, _super);\n    /**\n     * @param {string} code Code.\n     * @param {string=} opt_axisOrientation Axis orientation.\n     */\n    function EPSG4326Projection(code, opt_axisOrientation) {\n        return _super.call(this, {\n            code: code,\n            units: Units.DEGREES,\n            extent: EXTENT,\n            axisOrientation: opt_axisOrientation,\n            global: true,\n            metersPerUnit: METERS_PER_UNIT,\n            worldExtent: EXTENT,\n        }) || this;\n    }\n    return EPSG4326Projection;\n}(Projection));\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [\n    new EPSG4326Projection('CRS:84'),\n    new EPSG4326Projection('EPSG:4326', 'neu'),\n    new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n    new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n    new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n];\n//# sourceMappingURL=epsg4326.js.map","/**\n * @module ol/proj/projections\n */\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nvar cache = {};\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n    cache = {};\n}\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default} The projection (if cached).\n */\nexport function get(code) {\n    return (cache[code] ||\n        cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\n        null);\n}\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n    cache[code] = projection;\n}\n//# sourceMappingURL=projections.js.map","/**\n * @module ol/proj/transforms\n */\nimport { isEmpty } from '../obj.js';\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nvar transforms = {};\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n    transforms = {};\n}\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n    var sourceCode = source.getCode();\n    var destinationCode = destination.getCode();\n    if (!(sourceCode in transforms)) {\n        transforms[sourceCode] = {};\n    }\n    transforms[sourceCode][destinationCode] = transformFn;\n}\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n    var sourceCode = source.getCode();\n    var destinationCode = destination.getCode();\n    var transform = transforms[sourceCode][destinationCode];\n    delete transforms[sourceCode][destinationCode];\n    if (isEmpty(transforms[sourceCode])) {\n        delete transforms[sourceCode];\n    }\n    return transform;\n}\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n    var transform;\n    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n        transform = transforms[sourceCode][destinationCode];\n    }\n    return transform;\n}\n//# sourceMappingURL=transforms.js.map","/**\n * @module ol/proj\n */\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj~addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection} object for the new projection and add it with\n * {@link module:ol/proj~addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj~addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection} with\n * {@link module:ol/proj~addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport Units, { METERS_PER_UNIT } from './proj/Units.js';\nimport { PROJECTIONS as EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326, } from './proj/epsg3857.js';\nimport { PROJECTIONS as EPSG4326_PROJECTIONS } from './proj/epsg4326.js';\nimport { add as addProj, clear as clearProj, get as getProj, } from './proj/projections.js';\nimport { add as addTransformFunc, clear as clearTransformFuncs, get as getTransformFunc, } from './proj/transforms.js';\nimport { applyTransform, getWidth } from './extent.js';\nimport { clamp, modulo } from './math.js';\nimport { getDistance } from './sphere.js';\nimport { getWorldsAway } from './coordinate.js';\n/**\n * A projection as {@link module:ol/proj/Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\nexport { METERS_PER_UNIT };\nexport { Projection };\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, opt_output, opt_dimension) {\n    var output;\n    if (opt_output !== undefined) {\n        for (var i = 0, ii = input.length; i < ii; ++i) {\n            opt_output[i] = input[i];\n        }\n        output = opt_output;\n    }\n    else {\n        output = input.slice();\n    }\n    return output;\n}\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>=} opt_output Output array of coordinate values.\n * @param {number=} opt_dimension Dimension.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, opt_output, opt_dimension) {\n    if (opt_output !== undefined && input !== opt_output) {\n        for (var i = 0, ii = input.length; i < ii; ++i) {\n            opt_output[i] = input[i];\n        }\n        input = opt_output;\n    }\n    return input;\n}\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n    addProj(projection.getCode(), projection);\n    addTransformFunc(projection, projection, cloneTransform);\n}\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n    projections.forEach(addProjection);\n}\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n    return typeof projectionLike === 'string'\n        ? getProj(/** @type {string} */ (projectionLike))\n        : /** @type {Projection} */ (projectionLike) || null;\n}\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the 'point' pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").default=} opt_units Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, opt_units) {\n    projection = get(projection);\n    var pointResolution;\n    var getter = projection.getPointResolutionFunc();\n    if (getter) {\n        pointResolution = getter(resolution, point);\n        if (opt_units && opt_units !== projection.getUnits()) {\n            var metersPerUnit = projection.getMetersPerUnit();\n            if (metersPerUnit) {\n                pointResolution =\n                    (pointResolution * metersPerUnit) / METERS_PER_UNIT[opt_units];\n            }\n        }\n    }\n    else {\n        var units = projection.getUnits();\n        if ((units == Units.DEGREES && !opt_units) || opt_units == Units.DEGREES) {\n            pointResolution = resolution;\n        }\n        else {\n            // Estimate point resolution by transforming the center pixel to EPSG:4326,\n            // measuring its width and height on the normal sphere, and taking the\n            // average of the width and height.\n            var toEPSG4326_1 = getTransformFromProjections(projection, get('EPSG:4326'));\n            if (toEPSG4326_1 === identityTransform && units !== Units.DEGREES) {\n                // no transform is available\n                pointResolution = resolution * projection.getMetersPerUnit();\n            }\n            else {\n                var vertices = [\n                    point[0] - resolution / 2,\n                    point[1],\n                    point[0] + resolution / 2,\n                    point[1],\n                    point[0],\n                    point[1] - resolution / 2,\n                    point[0],\n                    point[1] + resolution / 2,\n                ];\n                vertices = toEPSG4326_1(vertices, vertices, 2);\n                var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n                var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n                pointResolution = (width + height) / 2;\n            }\n            var metersPerUnit = opt_units\n                ? METERS_PER_UNIT[opt_units]\n                : projection.getMetersPerUnit();\n            if (metersPerUnit !== undefined) {\n                pointResolution /= metersPerUnit;\n            }\n        }\n    }\n    return pointResolution;\n}\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n    addProjections(projections);\n    projections.forEach(function (source) {\n        projections.forEach(function (destination) {\n            if (source !== destination) {\n                addTransformFunc(source, destination, cloneTransform);\n            }\n        });\n    });\n}\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\n    projections1.forEach(function (projection1) {\n        projections2.forEach(function (projection2) {\n            addTransformFunc(projection1, projection2, forwardTransform);\n            addTransformFunc(projection2, projection1, inverseTransform);\n        });\n    });\n}\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n    clearProj();\n    clearTransformFuncs();\n}\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n    if (!projection) {\n        return get(defaultCode);\n    }\n    else if (typeof projection === 'string') {\n        return get(projection);\n    }\n    else {\n        return /** @type {Projection} */ (projection);\n    }\n}\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n    return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>=} opt_output Output.\n     * @param {number=} opt_dimension Dimension.\n     * @return {Array<number>} Output.\n     */\n    function (input, opt_output, opt_dimension) {\n        var length = input.length;\n        var dimension = opt_dimension !== undefined ? opt_dimension : 2;\n        var output = opt_output !== undefined ? opt_output : new Array(length);\n        for (var i = 0; i < length; i += dimension) {\n            var point = coordTransform([input[i], input[i + 1]]);\n            output[i] = point[0];\n            output[i + 1] = point[1];\n            for (var j = dimension - 1; j >= 2; --j) {\n                output[i + j] = input[i + j];\n            }\n        }\n        return output;\n    });\n}\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n    var sourceProj = get(source);\n    var destProj = get(destination);\n    addTransformFunc(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\n    addTransformFunc(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\n}\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike=} opt_projection Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, opt_projection) {\n    return transform(coordinate, 'EPSG:4326', opt_projection !== undefined ? opt_projection : 'EPSG:3857');\n}\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike=} opt_projection Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, opt_projection) {\n    var lonLat = transform(coordinate, opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');\n    var lon = lonLat[0];\n    if (lon < -180 || lon > 180) {\n        lonLat[0] = modulo(lon + 180, 360) - 180;\n    }\n    return lonLat;\n}\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n    if (projection1 === projection2) {\n        return true;\n    }\n    var equalUnits = projection1.getUnits() === projection2.getUnits();\n    if (projection1.getCode() === projection2.getCode()) {\n        return equalUnits;\n    }\n    else {\n        var transformFunc = getTransformFromProjections(projection1, projection2);\n        return transformFunc === cloneTransform && equalUnits;\n    }\n}\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(sourceProjection, destinationProjection) {\n    var sourceCode = sourceProjection.getCode();\n    var destinationCode = destinationProjection.getCode();\n    var transformFunc = getTransformFunc(sourceCode, destinationCode);\n    if (!transformFunc) {\n        transformFunc = identityTransform;\n    }\n    return transformFunc;\n}\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n    var sourceProjection = get(source);\n    var destinationProjection = get(destination);\n    return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj~transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n    var transformFunc = getTransform(source, destination);\n    return transformFunc(coordinate, undefined, coordinate.length);\n}\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number=} opt_stops Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, opt_stops) {\n    var transformFunc = getTransform(source, destination);\n    return applyTransform(extent, transformFunc, undefined, opt_stops);\n}\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(point, sourceProjection, destinationProjection) {\n    var transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\n    return transformFunc(point);\n}\n/**\n * @type {?Projection}\n */\nvar userProjection = null;\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @param {ProjectionLike} projection The user projection.\n */\nexport function setUserProjection(projection) {\n    userProjection = get(projection);\n}\n/**\n * Clear the user projection if set.  Note that this method is not yet a part of\n * the stable API.  Support for user projections is not yet complete and should\n * be considered experimental.\n */\nexport function clearUserProjection() {\n    userProjection = null;\n}\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @returns {?Projection} The user projection (or null if not set).\n */\nexport function getUserProjection() {\n    return userProjection;\n}\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.  Note that this\n * method is not yet a part of the stable API.  Support for user projections is\n * not yet complete and should be considered experimental.\n */\nexport function useGeographic() {\n    setUserProjection('EPSG:4326');\n}\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @returns {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n    if (!userProjection) {\n        return coordinate;\n    }\n    return transform(coordinate, sourceProjection, userProjection);\n}\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @returns {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n    if (!userProjection) {\n        return coordinate;\n    }\n    return transform(coordinate, userProjection, destProjection);\n}\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @returns {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n    if (!userProjection) {\n        return extent;\n    }\n    return transformExtent(extent, sourceProjection, userProjection);\n}\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @returns {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n    if (!userProjection) {\n        return extent;\n    }\n    return transformExtent(extent, userProjection, destProjection);\n}\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destiation).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destiation).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n    return function (coord) {\n        var sourceX = coord[0];\n        var sourceY = coord[1];\n        var transformed, worldsAway;\n        if (sourceProj.canWrapX()) {\n            var sourceExtent = sourceProj.getExtent();\n            var sourceExtentWidth = getWidth(sourceExtent);\n            worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n            if (worldsAway) {\n                // Move x to the real world\n                sourceX = sourceX - worldsAway * sourceExtentWidth;\n            }\n            sourceX = clamp(sourceX, sourceExtent[0], sourceExtent[2]);\n            sourceY = clamp(sourceY, sourceExtent[1], sourceExtent[3]);\n            transformed = transform([sourceX, sourceY]);\n        }\n        else {\n            transformed = transform(coord);\n        }\n        if (worldsAway && destProj.canWrapX()) {\n            // Move transformed coordinate back to the offset world\n            transformed[0] += worldsAway * getWidth(destProj.getExtent());\n        }\n        return transformed;\n    };\n}\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n    // Add transformations that don't alter coordinates to convert within set of\n    // projections with equal meaning.\n    addEquivalentProjections(EPSG3857_PROJECTIONS);\n    addEquivalentProjections(EPSG4326_PROJECTIONS);\n    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n    // coordinates and back.\n    addEquivalentTransforms(EPSG4326_PROJECTIONS, EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326);\n}\naddCommon();\n//# sourceMappingURL=proj.js.map","/**\n * @module ol/render/Event\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Event from '../events/Event.js';\nvar RenderEvent = /** @class */ (function (_super) {\n    __extends(RenderEvent, _super);\n    /**\n     * @param {import(\"./EventType.js\").default} type Type.\n     * @param {import(\"../transform.js\").Transform=} opt_inversePixelTransform Transform for\n     *     CSS pixels to rendered pixels.\n     * @param {import(\"../PluggableMap.js\").FrameState=} opt_frameState Frame state.\n     * @param {?CanvasRenderingContext2D=} opt_context Context.\n     */\n    function RenderEvent(type, opt_inversePixelTransform, opt_frameState, opt_context) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n         * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n         * @type {import(\"../transform.js\").Transform|undefined}\n         * @api\n         */\n        _this.inversePixelTransform = opt_inversePixelTransform;\n        /**\n         * An object representing the current render frame state.\n         * @type {import(\"../PluggableMap.js\").FrameState|undefined}\n         * @api\n         */\n        _this.frameState = opt_frameState;\n        /**\n         * Canvas context. Not available when the event is dispatched by the map. Only available\n         * when a Canvas renderer is used, null otherwise.\n         * @type {CanvasRenderingContext2D|null|undefined}\n         * @api\n         */\n        _this.context = opt_context;\n        return _this;\n    }\n    return RenderEvent;\n}(Event));\nexport default RenderEvent;\n//# sourceMappingURL=Event.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/Layer\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport Observable from '../Observable.js';\nimport SourceState from '../source/State.js';\nimport { abstract } from '../util.js';\n/**\n * @template {import(\"../layer/Layer.js\").default} LayerType\n */\nvar LayerRenderer = /** @class */ (function (_super) {\n    __extends(LayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     */\n    function LayerRenderer(layer) {\n        var _this = _super.call(this) || this;\n        /** @private */\n        _this.boundHandleImageChange_ = _this.handleImageChange_.bind(_this);\n        /**\n         * @protected\n         * @type {LayerType}\n         */\n        _this.layer_ = layer;\n        /**\n         * @type {import(\"../render/canvas/ExecutorGroup\").default}\n         */\n        _this.declutterExecutorGroup = null;\n        return _this;\n    }\n    /**\n     * Asynchronous layer level hit detection.\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n     * an array of features.\n     */\n    LayerRenderer.prototype.getFeatures = function (pixel) {\n        return abstract();\n    };\n    /**\n     * Determine whether render should be called.\n     * @abstract\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    LayerRenderer.prototype.prepareFrame = function (frameState) {\n        return abstract();\n    };\n    /**\n     * Render the layer.\n     * @abstract\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    LayerRenderer.prototype.renderFrame = function (frameState, target) {\n        return abstract();\n    };\n    /**\n     * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n     * @param {number} zoom Zoom level.\n     * @param {import(\"../Tile.js\").default} tile Tile.\n     * @return {boolean|void} If `false`, the tile will not be considered loaded.\n     */\n    LayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {\n        if (!tiles[zoom]) {\n            tiles[zoom] = {};\n        }\n        tiles[zoom][tile.tileCoord.toString()] = tile;\n        return undefined;\n    };\n    /**\n     * Create a function that adds loaded tiles to the tile lookup.\n     * @param {import(\"../source/Tile.js\").default} source Tile source.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection of the tiles.\n     * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n     * @return {function(number, import(\"../TileRange.js\").default):boolean} A function that can be\n     *     called with a zoom level and a tile range to add loaded tiles to the lookup.\n     * @protected\n     */\n    LayerRenderer.prototype.createLoadedTileFinder = function (source, projection, tiles) {\n        return (\n        /**\n         * @param {number} zoom Zoom level.\n         * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n         * @return {boolean} The tile range is fully loaded.\n         * @this {LayerRenderer}\n         */\n        function (zoom, tileRange) {\n            var callback = this.loadedTileCallback.bind(this, tiles, zoom);\n            return source.forEachLoadedTile(projection, zoom, tileRange, callback);\n        }.bind(this));\n    };\n    /**\n     * @abstract\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    LayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        return undefined;\n    };\n    /**\n     * @abstract\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n     *    location, null will be returned.  If there is data, but pixel values cannot be\n     *    returned, and empty array will be returned.\n     */\n    LayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n        return abstract();\n    };\n    /**\n     * @return {LayerType} Layer.\n     */\n    LayerRenderer.prototype.getLayer = function () {\n        return this.layer_;\n    };\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     * @abstract\n     */\n    LayerRenderer.prototype.handleFontsChanged = function () { };\n    /**\n     * Handle changes in image state.\n     * @param {import(\"../events/Event.js\").default} event Image change event.\n     * @private\n     */\n    LayerRenderer.prototype.handleImageChange_ = function (event) {\n        var image = /** @type {import(\"../Image.js\").default} */ (event.target);\n        if (image.getState() === ImageState.LOADED) {\n            this.renderIfReadyAndVisible();\n        }\n    };\n    /**\n     * Load the image if not already loaded, and register the image change\n     * listener if needed.\n     * @param {import(\"../ImageBase.js\").default} image Image.\n     * @return {boolean} `true` if the image is already loaded, `false` otherwise.\n     * @protected\n     */\n    LayerRenderer.prototype.loadImage = function (image) {\n        var imageState = image.getState();\n        if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {\n            image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);\n        }\n        if (imageState == ImageState.IDLE) {\n            image.load();\n            imageState = image.getState();\n        }\n        return imageState == ImageState.LOADED;\n    };\n    /**\n     * @protected\n     */\n    LayerRenderer.prototype.renderIfReadyAndVisible = function () {\n        var layer = this.getLayer();\n        if (layer.getVisible() && layer.getSourceState() == SourceState.READY) {\n            layer.changed();\n        }\n    };\n    return LayerRenderer;\n}(Observable));\nexport default LayerRenderer;\n//# sourceMappingURL=Layer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, } from '../../transform.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight, } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { rotateAtOffset } from '../../render/canvas.js';\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n */\nvar CanvasLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasLayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     */\n    function CanvasLayerRenderer(layer) {\n        var _this = _super.call(this, layer) || this;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.container = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedResolution;\n        /**\n         * A temporary transform.  The values in this transform should only be used in a\n         * function that sets the values.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.tempTransform = createTransform();\n        /**\n         * The transform for rendered pixels to viewport CSS pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.pixelTransform = createTransform();\n        /**\n         * The transform for viewport CSS pixels to rendered pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.inversePixelTransform = createTransform();\n        /**\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.context = null;\n        /**\n         * @type {boolean}\n         */\n        _this.containerReused = false;\n        return _this;\n    }\n    /**\n     * Get a rendering container from an existing target, if compatible.\n     * @param {HTMLElement} target Potential render target.\n     * @param {string} transform CSS Transform.\n     * @param {number} opacity Opacity.\n     */\n    CanvasLayerRenderer.prototype.useContainer = function (target, transform, opacity) {\n        var layerClassName = this.getLayer().getClassName();\n        var container, context;\n        if (target &&\n            target.style.opacity === '' &&\n            target.className === layerClassName) {\n            var canvas = target.firstElementChild;\n            if (canvas instanceof HTMLCanvasElement) {\n                context = canvas.getContext('2d');\n            }\n        }\n        if (context &&\n            (context.canvas.width === 0 ||\n                context.canvas.style.transform === transform)) {\n            // Container of the previous layer renderer can be used.\n            this.container = target;\n            this.context = context;\n            this.containerReused = true;\n        }\n        else if (this.containerReused) {\n            // Previously reused container cannot be used any more.\n            this.container = null;\n            this.context = null;\n            this.containerReused = false;\n        }\n        if (!this.container) {\n            container = document.createElement('div');\n            container.className = layerClassName;\n            var style = container.style;\n            style.position = 'absolute';\n            style.width = '100%';\n            style.height = '100%';\n            context = createCanvasContext2D();\n            var canvas = context.canvas;\n            container.appendChild(canvas);\n            style = canvas.style;\n            style.position = 'absolute';\n            style.left = '0';\n            style.transformOrigin = 'top left';\n            this.container = container;\n            this.context = context;\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.clip = function (context, frameState, extent) {\n        var pixelRatio = frameState.pixelRatio;\n        var halfWidth = (frameState.size[0] * pixelRatio) / 2;\n        var halfHeight = (frameState.size[1] * pixelRatio) / 2;\n        var rotation = frameState.viewState.rotation;\n        var topLeft = getTopLeft(extent);\n        var topRight = getTopRight(extent);\n        var bottomRight = getBottomRight(extent);\n        var bottomLeft = getBottomLeft(extent);\n        applyTransform(frameState.coordinateToPixelTransform, topLeft);\n        applyTransform(frameState.coordinateToPixelTransform, topRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n        context.save();\n        rotateAtOffset(context, -rotation, halfWidth, halfHeight);\n        context.beginPath();\n        context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);\n        context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);\n        context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);\n        context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);\n        context.clip();\n        rotateAtOffset(context, rotation, halfWidth, halfHeight);\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n        var topLeft = getTopLeft(extent);\n        var topRight = getTopRight(extent);\n        var bottomRight = getBottomRight(extent);\n        var bottomLeft = getBottomLeft(extent);\n        applyTransform(frameState.coordinateToPixelTransform, topLeft);\n        applyTransform(frameState.coordinateToPixelTransform, topRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n        var inverted = this.inversePixelTransform;\n        applyTransform(inverted, topLeft);\n        applyTransform(inverted, topRight);\n        applyTransform(inverted, bottomRight);\n        applyTransform(inverted, bottomLeft);\n        context.save();\n        context.beginPath();\n        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n        context.clip();\n    };\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n            layer.dispatchEvent(event_1);\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    };\n    /**\n     * Creates a transform for rendering to an element that will be rotated after rendering.\n     * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {number} width Width of the rendered element (in pixels).\n     * @param {number} height Height of the rendered element (in pixels).\n     * @param {number} offsetX Offset on the x-axis in view coordinates.\n     * @protected\n     * @return {!import(\"../../transform.js\").Transform} Transform.\n     */\n    CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n        var dx1 = width / 2;\n        var dy1 = height / 2;\n        var sx = pixelRatio / resolution;\n        var sy = -sx;\n        var dx2 = -center[0] + offsetX;\n        var dy2 = -center[1];\n        return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n     *    location, null will be returned.  If there is data, but pixel values cannot be\n     *    returned, and empty array will be returned.\n     */\n    CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n        var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n        var context = this.context;\n        var layer = this.getLayer();\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n            /** get only data inside of the layer extent */\n            if (!containsCoordinate(layerExtent, renderCoordinate)) {\n                return null;\n            }\n        }\n        var data;\n        try {\n            var x = Math.round(renderPixel[0]);\n            var y = Math.round(renderPixel[1]);\n            var newCanvas = document.createElement('canvas');\n            var newContext = newCanvas.getContext('2d');\n            newCanvas.width = 1;\n            newCanvas.height = 1;\n            newContext.clearRect(0, 0, 1, 1);\n            newContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n            data = newContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            if (err.name === 'SecurityError') {\n                // tainted canvas, we assume there is data at the given pixel (although there might not be)\n                return new Uint8Array();\n            }\n            return data;\n        }\n        if (data[3] === 0) {\n            return null;\n        }\n        return data;\n    };\n    return CanvasLayerRenderer;\n}(LayerRenderer));\nexport default CanvasLayerRenderer;\n//# sourceMappingURL=Layer.js.map","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport { apply as applyTransform, compose as composeTransform, makeInverse, } from '../../transform.js';\nimport { assign } from '../../obj.js';\nimport { createEmpty, equals, getIntersection, getTopLeft, } from '../../extent.js';\nimport { createTransformString } from '../../render/canvas.js';\nimport { fromUserExtent } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { numberSafeCompareFunction } from '../../array.js';\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n */\nvar CanvasTileLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasTileLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default} tileLayer Tile layer.\n     */\n    function CanvasTileLayerRenderer(tileLayer) {\n        var _this = _super.call(this, tileLayer) || this;\n        /**\n         * Rendered extent has changed since the previous `renderFrame()` call\n         * @type {boolean}\n         */\n        _this.extentChanged = true;\n        /**\n         * @private\n         * @type {?import(\"../../extent.js\").Extent}\n         */\n        _this.renderedExtent_ = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedPixelRatio;\n        /**\n         * @protected\n         * @type {import(\"../../proj/Projection.js\").default}\n         */\n        _this.renderedProjection = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedRevision;\n        /**\n         * @protected\n         * @type {!Array<import(\"../../Tile.js\").default>}\n         */\n        _this.renderedTiles = [];\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.newTiles_ = false;\n        /**\n         * @protected\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.tmpExtent = createEmpty();\n        /**\n         * @private\n         * @type {import(\"../../TileRange.js\").default}\n         */\n        _this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n        return _this;\n    }\n    /**\n     * @protected\n     * @param {import(\"../../Tile.js\").default} tile Tile.\n     * @return {boolean} Tile is drawable.\n     */\n    CanvasTileLayerRenderer.prototype.isDrawableTile = function (tile) {\n        var tileLayer = this.getLayer();\n        var tileState = tile.getState();\n        var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n        return (tileState == TileState.LOADED ||\n            tileState == TileState.EMPTY ||\n            (tileState == TileState.ERROR && !useInterimTilesOnError));\n    };\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {!import(\"../../Tile.js\").default} Tile.\n     */\n    CanvasTileLayerRenderer.prototype.getTile = function (z, x, y, frameState) {\n        var pixelRatio = frameState.pixelRatio;\n        var projection = frameState.viewState.projection;\n        var tileLayer = this.getLayer();\n        var tileSource = tileLayer.getSource();\n        var tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n        if (tile.getState() == TileState.ERROR) {\n            if (!tileLayer.getUseInterimTilesOnError()) {\n                // When useInterimTilesOnError is false, we consider the error tile as loaded.\n                tile.setState(TileState.LOADED);\n            }\n            else if (tileLayer.getPreload() > 0) {\n                // Preloaded tiles for lower resolutions might have finished loading.\n                this.newTiles_ = true;\n            }\n        }\n        if (!this.isDrawableTile(tile)) {\n            tile = tile.getInterimTile();\n        }\n        return tile;\n    };\n    /**\n     * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n     * @param {number} zoom Zoom level.\n     * @param {import(\"../../Tile.js\").default} tile Tile.\n     * @return {boolean|void} If `false`, the tile will not be considered loaded.\n     */\n    CanvasTileLayerRenderer.prototype.loadedTileCallback = function (tiles, zoom, tile) {\n        if (this.isDrawableTile(tile)) {\n            return _super.prototype.loadedTileCallback.call(this, tiles, zoom, tile);\n        }\n        return false;\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasTileLayerRenderer.prototype.prepareFrame = function (frameState) {\n        return !!this.getLayer().getSource();\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasTileLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        var viewResolution = viewState.resolution;\n        var viewCenter = viewState.center;\n        var rotation = viewState.rotation;\n        var pixelRatio = frameState.pixelRatio;\n        var tileLayer = this.getLayer();\n        var tileSource = tileLayer.getSource();\n        var sourceRevision = tileSource.getRevision();\n        var tileGrid = tileSource.getTileGridForProjection(projection);\n        var z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n        var tileResolution = tileGrid.getResolution(z);\n        var extent = frameState.extent;\n        var layerExtent = layerState.extent && fromUserExtent(layerState.extent, projection);\n        if (layerExtent) {\n            extent = getIntersection(extent, fromUserExtent(layerState.extent, projection));\n        }\n        var tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n        // desired dimensions of the canvas in pixels\n        var width = Math.round(frameState.size[0] * tilePixelRatio);\n        var height = Math.round(frameState.size[1] * tilePixelRatio);\n        if (rotation) {\n            var size = Math.round(Math.sqrt(width * width + height * height));\n            width = size;\n            height = size;\n        }\n        var dx = (tileResolution * width) / 2 / tilePixelRatio;\n        var dy = (tileResolution * height) / 2 / tilePixelRatio;\n        var canvasExtent = [\n            viewCenter[0] - dx,\n            viewCenter[1] - dy,\n            viewCenter[0] + dx,\n            viewCenter[1] + dy,\n        ];\n        var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n        /**\n         * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n         */\n        var tilesToDrawByZ = {};\n        tilesToDrawByZ[z] = {};\n        var findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);\n        var tmpExtent = this.tmpExtent;\n        var tmpTileRange = this.tmpTileRange_;\n        this.newTiles_ = false;\n        for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n            for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n                var tile = this.getTile(z, x, y, frameState);\n                if (this.isDrawableTile(tile)) {\n                    var uid = getUid(this);\n                    if (tile.getState() == TileState.LOADED) {\n                        tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n                        var inTransition = tile.inTransition(uid);\n                        if (!this.newTiles_ &&\n                            (inTransition || this.renderedTiles.indexOf(tile) === -1)) {\n                            this.newTiles_ = true;\n                        }\n                    }\n                    if (tile.getAlpha(uid, frameState.time) === 1) {\n                        // don't look for alt tiles if alpha is 1\n                        continue;\n                    }\n                }\n                var childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);\n                var covered = false;\n                if (childTileRange) {\n                    covered = findLoadedTiles(z + 1, childTileRange);\n                }\n                if (!covered) {\n                    tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);\n                }\n            }\n        }\n        var canvasScale = tileResolution / viewResolution;\n        // set forward and inverse pixel transforms\n        composeTransform(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / tilePixelRatio, 1 / tilePixelRatio, rotation, -width / 2, -height / 2);\n        var canvasTransform = createTransformString(this.pixelTransform);\n        this.useContainer(target, canvasTransform, layerState.opacity);\n        var context = this.context;\n        var canvas = context.canvas;\n        makeInverse(this.inversePixelTransform, this.pixelTransform);\n        // set scale transform for calculating tile positions on the canvas\n        composeTransform(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n        }\n        else if (!this.containerReused) {\n            context.clearRect(0, 0, width, height);\n        }\n        if (layerExtent) {\n            this.clipUnrotated(context, frameState, layerExtent);\n        }\n        assign(context, tileSource.getContextOptions());\n        this.preRender(context, frameState);\n        this.renderedTiles.length = 0;\n        /** @type {Array<number>} */\n        var zs = Object.keys(tilesToDrawByZ).map(Number);\n        zs.sort(numberSafeCompareFunction);\n        var clips, clipZs, currentClip;\n        if (layerState.opacity === 1 &&\n            (!this.containerReused ||\n                tileSource.getOpaque(frameState.viewState.projection))) {\n            zs = zs.reverse();\n        }\n        else {\n            clips = [];\n            clipZs = [];\n        }\n        for (var i = zs.length - 1; i >= 0; --i) {\n            var currentZ = zs[i];\n            var currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);\n            var currentResolution = tileGrid.getResolution(currentZ);\n            var currentScale = currentResolution / tileResolution;\n            var dx_1 = currentTilePixelSize[0] * currentScale * canvasScale;\n            var dy_1 = currentTilePixelSize[1] * currentScale * canvasScale;\n            var originTileCoord = tileGrid.getTileCoordForCoordAndZ(getTopLeft(canvasExtent), currentZ);\n            var originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n            var origin_1 = applyTransform(this.tempTransform, [\n                (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\n                    tileResolution,\n                (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\n                    tileResolution,\n            ]);\n            var tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);\n            var tilesToDraw = tilesToDrawByZ[currentZ];\n            for (var tileCoordKey in tilesToDraw) {\n                var tile = /** @type {import(\"../../ImageTile.js\").default} */ (tilesToDraw[tileCoordKey]);\n                var tileCoord = tile.tileCoord;\n                // Calculate integer positions and sizes so that tiles align\n                var floatX = origin_1[0] - (originTileCoord[1] - tileCoord[1]) * dx_1;\n                var nextX = Math.round(floatX + dx_1);\n                var floatY = origin_1[1] - (originTileCoord[2] - tileCoord[2]) * dy_1;\n                var nextY = Math.round(floatY + dy_1);\n                var x = Math.round(floatX);\n                var y = Math.round(floatY);\n                var w = nextX - x;\n                var h = nextY - y;\n                var transition = z === currentZ;\n                var inTransition = transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\n                if (!inTransition) {\n                    if (clips) {\n                        // Clip mask for regions in this tile that already filled by a higher z tile\n                        context.save();\n                        currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n                        for (var i_1 = 0, ii = clips.length; i_1 < ii; ++i_1) {\n                            if (z !== currentZ && currentZ < clipZs[i_1]) {\n                                var clip = clips[i_1];\n                                context.beginPath();\n                                // counter-clockwise (outer ring) for current tile\n                                context.moveTo(currentClip[0], currentClip[1]);\n                                context.lineTo(currentClip[2], currentClip[3]);\n                                context.lineTo(currentClip[4], currentClip[5]);\n                                context.lineTo(currentClip[6], currentClip[7]);\n                                // clockwise (inner ring) for higher z tile\n                                context.moveTo(clip[6], clip[7]);\n                                context.lineTo(clip[4], clip[5]);\n                                context.lineTo(clip[2], clip[3]);\n                                context.lineTo(clip[0], clip[1]);\n                                context.clip();\n                            }\n                        }\n                        clips.push(currentClip);\n                        clipZs.push(currentZ);\n                    }\n                    else {\n                        context.clearRect(x, y, w, h);\n                    }\n                }\n                this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition, layerState.opacity);\n                if (clips && !inTransition) {\n                    context.restore();\n                }\n                this.renderedTiles.push(tile);\n                this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n            }\n        }\n        this.renderedRevision = sourceRevision;\n        this.renderedResolution = tileResolution;\n        this.extentChanged =\n            !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n        this.renderedExtent_ = canvasExtent;\n        this.renderedPixelRatio = pixelRatio;\n        this.renderedProjection = projection;\n        this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());\n        this.scheduleExpireCache(frameState, tileSource);\n        this.postRender(context, frameState);\n        if (layerState.extent) {\n            context.restore();\n        }\n        if (canvasTransform !== canvas.style.transform) {\n            canvas.style.transform = canvasTransform;\n        }\n        return this.container;\n    };\n    /**\n     * @param {import(\"../../ImageTile.js\").default} tile Tile.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} x Left of the tile.\n     * @param {number} y Top of the tile.\n     * @param {number} w Width of the tile.\n     * @param {number} h Height of the tile.\n     * @param {number} gutter Tile gutter.\n     * @param {boolean} transition Apply an alpha transition.\n     * @param {number} opacity Opacity.\n     */\n    CanvasTileLayerRenderer.prototype.drawTileImage = function (tile, frameState, x, y, w, h, gutter, transition, opacity) {\n        var image = this.getTileImage(tile);\n        if (!image) {\n            return;\n        }\n        var uid = getUid(this);\n        var tileAlpha = transition ? tile.getAlpha(uid, frameState.time) : 1;\n        var alpha = opacity * tileAlpha;\n        var alphaChanged = alpha !== this.context.globalAlpha;\n        if (alphaChanged) {\n            this.context.save();\n            this.context.globalAlpha = alpha;\n        }\n        this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);\n        if (alphaChanged) {\n            this.context.restore();\n        }\n        if (tileAlpha !== 1) {\n            frameState.animate = true;\n        }\n        else if (transition) {\n            tile.endTransition(uid);\n        }\n    };\n    /**\n     * @return {HTMLCanvasElement} Image\n     */\n    CanvasTileLayerRenderer.prototype.getImage = function () {\n        var context = this.context;\n        return context ? context.canvas : null;\n    };\n    /**\n     * Get the image from a tile.\n     * @param {import(\"../../ImageTile.js\").default} tile Tile.\n     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.getTileImage = function (tile) {\n        return tile.getImage();\n    };\n    /**\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.scheduleExpireCache = function (frameState, tileSource) {\n        if (tileSource.canExpireCache()) {\n            /**\n             * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n             * @param {import(\"../../PluggableMap.js\").default} map Map.\n             * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n             */\n            var postRenderFunction = function (tileSource, map, frameState) {\n                var tileSourceKey = getUid(tileSource);\n                if (tileSourceKey in frameState.usedTiles) {\n                    tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);\n                }\n            }.bind(null, tileSource);\n            frameState.postRenderFunctions.push(\n            /** @type {import(\"../../PluggableMap.js\").PostRenderFunction} */ (postRenderFunction));\n        }\n    };\n    /**\n     * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n     * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n     * @param {import('../../Tile.js').default} tile Tile.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.updateUsedTiles = function (usedTiles, tileSource, tile) {\n        // FIXME should we use tilesToDrawByZ instead?\n        var tileSourceKey = getUid(tileSource);\n        if (!(tileSourceKey in usedTiles)) {\n            usedTiles[tileSourceKey] = {};\n        }\n        usedTiles[tileSourceKey][tile.getKey()] = true;\n    };\n    /**\n     * Manage tile pyramid.\n     * This function performs a number of functions related to the tiles at the\n     * current zoom and lower zoom levels:\n     * - registers idle tiles in frameState.wantedTiles so that they are not\n     *   discarded by the tile queue\n     * - enqueues missing tiles\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n     * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n     * @param {import(\"../../extent.js\").Extent} extent Extent.\n     * @param {number} currentZ Current Z.\n     * @param {number} preload Load low resolution tiles up to 'preload' levels.\n     * @param {function(import(\"../../Tile.js\").default)=} opt_tileCallback Tile callback.\n     * @protected\n     */\n    CanvasTileLayerRenderer.prototype.manageTilePyramid = function (frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, opt_tileCallback) {\n        var tileSourceKey = getUid(tileSource);\n        if (!(tileSourceKey in frameState.wantedTiles)) {\n            frameState.wantedTiles[tileSourceKey] = {};\n        }\n        var wantedTiles = frameState.wantedTiles[tileSourceKey];\n        var tileQueue = frameState.tileQueue;\n        var minZoom = tileGrid.getMinZoom();\n        var tileCount = 0;\n        var tile, tileRange, tileResolution, x, y, z;\n        for (z = minZoom; z <= currentZ; ++z) {\n            tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n            tileResolution = tileGrid.getResolution(z);\n            for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n                for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n                    if (currentZ - z <= preload) {\n                        ++tileCount;\n                        tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n                        if (tile.getState() == TileState.IDLE) {\n                            wantedTiles[tile.getKey()] = true;\n                            if (!tileQueue.isKeyQueued(tile.getKey())) {\n                                tileQueue.enqueue([\n                                    tile,\n                                    tileSourceKey,\n                                    tileGrid.getTileCoordCenter(tile.tileCoord),\n                                    tileResolution,\n                                ]);\n                            }\n                        }\n                        if (opt_tileCallback !== undefined) {\n                            opt_tileCallback(tile);\n                        }\n                    }\n                    else {\n                        tileSource.useTile(z, x, y, projection);\n                    }\n                }\n            }\n        }\n        tileSource.updateCacheSize(tileCount, projection);\n    };\n    return CanvasTileLayerRenderer;\n}(CanvasLayerRenderer));\n/**\n * @function\n * @return {import(\"../../layer/Tile.js\").default|import(\"../../layer/VectorTile.js\").default}\n */\nCanvasTileLayerRenderer.prototype.getLayer;\nexport default CanvasTileLayerRenderer;\n//# sourceMappingURL=TileLayer.js.map","/**\n * @module ol/render/Box\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Disposable from '../Disposable.js';\nimport Polygon from '../geom/Polygon.js';\nvar RenderBox = /** @class */ (function (_super) {\n    __extends(RenderBox, _super);\n    /**\n     * @param {string} className CSS class name.\n     */\n    function RenderBox(className) {\n        var _this = _super.call(this) || this;\n        /**\n         * @type {import(\"../geom/Polygon.js\").default}\n         * @private\n         */\n        _this.geometry_ = null;\n        /**\n         * @type {HTMLDivElement}\n         * @private\n         */\n        _this.element_ = document.createElement('div');\n        _this.element_.style.position = 'absolute';\n        _this.element_.style.pointerEvents = 'auto';\n        _this.element_.className = 'ol-box ' + className;\n        /**\n         * @private\n         * @type {import(\"../PluggableMap.js\").default}\n         */\n        _this.map_ = null;\n        /**\n         * @private\n         * @type {import(\"../pixel.js\").Pixel}\n         */\n        _this.startPixel_ = null;\n        /**\n         * @private\n         * @type {import(\"../pixel.js\").Pixel}\n         */\n        _this.endPixel_ = null;\n        return _this;\n    }\n    /**\n     * Clean up.\n     */\n    RenderBox.prototype.disposeInternal = function () {\n        this.setMap(null);\n    };\n    /**\n     * @private\n     */\n    RenderBox.prototype.render_ = function () {\n        var startPixel = this.startPixel_;\n        var endPixel = this.endPixel_;\n        var px = 'px';\n        var style = this.element_.style;\n        style.left = Math.min(startPixel[0], endPixel[0]) + px;\n        style.top = Math.min(startPixel[1], endPixel[1]) + px;\n        style.width = Math.abs(endPixel[0] - startPixel[0]) + px;\n        style.height = Math.abs(endPixel[1] - startPixel[1]) + px;\n    };\n    /**\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    RenderBox.prototype.setMap = function (map) {\n        if (this.map_) {\n            this.map_.getOverlayContainer().removeChild(this.element_);\n            var style = this.element_.style;\n            style.left = 'inherit';\n            style.top = 'inherit';\n            style.width = 'inherit';\n            style.height = 'inherit';\n        }\n        this.map_ = map;\n        if (this.map_) {\n            this.map_.getOverlayContainer().appendChild(this.element_);\n        }\n    };\n    /**\n     * @param {import(\"../pixel.js\").Pixel} startPixel Start pixel.\n     * @param {import(\"../pixel.js\").Pixel} endPixel End pixel.\n     */\n    RenderBox.prototype.setPixels = function (startPixel, endPixel) {\n        this.startPixel_ = startPixel;\n        this.endPixel_ = endPixel;\n        this.createOrUpdateGeometry();\n        this.render_();\n    };\n    /**\n     * Creates or updates the cached geometry.\n     */\n    RenderBox.prototype.createOrUpdateGeometry = function () {\n        var startPixel = this.startPixel_;\n        var endPixel = this.endPixel_;\n        var pixels = [\n            startPixel,\n            [startPixel[0], endPixel[1]],\n            endPixel,\n            [endPixel[0], startPixel[1]],\n        ];\n        var coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);\n        // close the polygon\n        coordinates[4] = coordinates[0].slice();\n        if (!this.geometry_) {\n            this.geometry_ = new Polygon([coordinates]);\n        }\n        else {\n            this.geometry_.setCoordinates([coordinates]);\n        }\n    };\n    /**\n     * @return {import(\"../geom/Polygon.js\").default} Geometry.\n     */\n    RenderBox.prototype.getGeometry = function () {\n        return this.geometry_;\n    };\n    return RenderBox;\n}(Disposable));\nexport default RenderBox;\n//# sourceMappingURL=Box.js.map","/**\n * @module ol/pointer/EventType\n */\n/**\n * Constants for event names.\n * @enum {string}\n */\nexport default {\n    POINTERMOVE: 'pointermove',\n    POINTERDOWN: 'pointerdown',\n    POINTERUP: 'pointerup',\n    POINTEROVER: 'pointerover',\n    POINTEROUT: 'pointerout',\n    POINTERENTER: 'pointerenter',\n    POINTERLEAVE: 'pointerleave',\n    POINTERCANCEL: 'pointercancel',\n};\n//# sourceMappingURL=EventType.js.map","/**\n * @module ol/render/canvas\n */\nimport BaseObject from '../Object.js';\nimport EventTarget from '../events/Target.js';\nimport { WORKER_OFFSCREEN_CANVAS } from '../has.js';\nimport { clear } from '../obj.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { getFontParameters } from '../css.js';\nimport { toString } from '../transform.js';\n/**\n * @typedef {Object} FillState\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle\n */\n/**\n * @typedef Label\n * @property {number} width\n * @property {number} height\n * @property {Array<string|number>} contextInstructions\n */\n/**\n * @typedef {Object} FillStrokeState\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle]\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle]\n * @property {CanvasLineCap} [currentLineCap]\n * @property {Array<number>} currentLineDash\n * @property {number} [currentLineDashOffset]\n * @property {CanvasLineJoin} [currentLineJoin]\n * @property {number} [currentLineWidth]\n * @property {number} [currentMiterLimit]\n * @property {number} [lastStroke]\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle]\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle]\n * @property {CanvasLineCap} [lineCap]\n * @property {Array<number>} lineDash\n * @property {number} [lineDashOffset]\n * @property {CanvasLineJoin} [lineJoin]\n * @property {number} [lineWidth]\n * @property {number} [miterLimit]\n */\n/**\n * @typedef {Object} StrokeState\n * @property {CanvasLineCap} lineCap\n * @property {Array<number>} lineDash\n * @property {number} lineDashOffset\n * @property {CanvasLineJoin} lineJoin\n * @property {number} lineWidth\n * @property {number} miterLimit\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle\n */\n/**\n * @typedef {Object} TextState\n * @property {string} font\n * @property {string} [textAlign]\n * @property {string} textBaseline\n * @property {string} [placement]\n * @property {number} [maxAngle]\n * @property {boolean} [overflow]\n * @property {import(\"../style/Fill.js\").default} [backgroundFill]\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke]\n * @property {import(\"../size.js\").Size} [scale]\n * @property {Array<number>} [padding]\n */\n/**\n * @typedef {Object} SerializableInstructions\n * @property {Array<*>} instructions The rendering instructions.\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\n * @property {Array<number>} coordinates The array of all coordinates.\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\n */\n/**\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\n */\n/**\n * @const\n * @type {string}\n */\nexport var defaultFont = '10px sans-serif';\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nexport var defaultFillStyle = '#000';\n/**\n * @const\n * @type {CanvasLineCap}\n */\nexport var defaultLineCap = 'round';\n/**\n * @const\n * @type {Array<number>}\n */\nexport var defaultLineDash = [];\n/**\n * @const\n * @type {number}\n */\nexport var defaultLineDashOffset = 0;\n/**\n * @const\n * @type {CanvasLineJoin}\n */\nexport var defaultLineJoin = 'round';\n/**\n * @const\n * @type {number}\n */\nexport var defaultMiterLimit = 10;\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nexport var defaultStrokeStyle = '#000';\n/**\n * @const\n * @type {string}\n */\nexport var defaultTextAlign = 'center';\n/**\n * @const\n * @type {string}\n */\nexport var defaultTextBaseline = 'middle';\n/**\n * @const\n * @type {Array<number>}\n */\nexport var defaultPadding = [0, 0, 0, 0];\n/**\n * @const\n * @type {number}\n */\nexport var defaultLineWidth = 1;\n/**\n * @type {BaseObject}\n */\nexport var checkedFonts = new BaseObject();\n/**\n * The label cache for text rendering. To change the default cache size of 2048\n * entries, use {@link module:ol/structs/LRUCache#setSize}.\n * Deprecated - there is no label cache any more.\n * @type {?}\n * @api\n * @deprecated\n */\nexport var labelCache = new EventTarget();\nlabelCache.setSize = function () {\n    console.warn('labelCache is deprecated.'); //eslint-disable-line\n};\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar measureContext = null;\n/**\n * @type {string}\n */\nvar measureFont;\n/**\n * @type {!Object<string, number>}\n */\nexport var textHeights = {};\n/**\n * Clears the label cache when a font becomes available.\n * @param {string} fontSpec CSS font spec.\n */\nexport var registerFont = (function () {\n    var retries = 100;\n    var size = '32px ';\n    var referenceFonts = ['monospace', 'serif'];\n    var len = referenceFonts.length;\n    var text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n    var interval, referenceWidth;\n    /**\n     * @param {string} fontStyle Css font-style\n     * @param {string} fontWeight Css font-weight\n     * @param {*} fontFamily Css font-family\n     * @return {boolean} Font with style and weight is available\n     */\n    function isAvailable(fontStyle, fontWeight, fontFamily) {\n        var available = true;\n        for (var i = 0; i < len; ++i) {\n            var referenceFont = referenceFonts[i];\n            referenceWidth = measureTextWidth(fontStyle + ' ' + fontWeight + ' ' + size + referenceFont, text);\n            if (fontFamily != referenceFont) {\n                var width = measureTextWidth(fontStyle +\n                    ' ' +\n                    fontWeight +\n                    ' ' +\n                    size +\n                    fontFamily +\n                    ',' +\n                    referenceFont, text);\n                // If width and referenceWidth are the same, then the fallback was used\n                // instead of the font we wanted, so the font is not available.\n                available = available && width != referenceWidth;\n            }\n        }\n        if (available) {\n            return true;\n        }\n        return false;\n    }\n    function check() {\n        var done = true;\n        var fonts = checkedFonts.getKeys();\n        for (var i = 0, ii = fonts.length; i < ii; ++i) {\n            var font = fonts[i];\n            if (checkedFonts.get(font) < retries) {\n                if (isAvailable.apply(this, font.split('\\n'))) {\n                    clear(textHeights);\n                    // Make sure that loaded fonts are picked up by Safari\n                    measureContext = null;\n                    measureFont = undefined;\n                    checkedFonts.set(font, retries);\n                }\n                else {\n                    checkedFonts.set(font, checkedFonts.get(font) + 1, true);\n                    done = false;\n                }\n            }\n        }\n        if (done) {\n            clearInterval(interval);\n            interval = undefined;\n        }\n    }\n    return function (fontSpec) {\n        var font = getFontParameters(fontSpec);\n        if (!font) {\n            return;\n        }\n        var families = font.families;\n        for (var i = 0, ii = families.length; i < ii; ++i) {\n            var family = families[i];\n            var key = font.style + '\\n' + font.weight + '\\n' + family;\n            if (checkedFonts.get(key) === undefined) {\n                checkedFonts.set(key, retries, true);\n                if (!isAvailable(font.style, font.weight, family)) {\n                    checkedFonts.set(key, 0, true);\n                    if (interval === undefined) {\n                        interval = setInterval(check, 32);\n                    }\n                }\n            }\n        }\n    };\n})();\n/**\n * @param {string} font Font to use for measuring.\n * @return {import(\"../size.js\").Size} Measurement.\n */\nexport var measureTextHeight = (function () {\n    /**\n     * @type {HTMLDivElement}\n     */\n    var div;\n    return function (fontSpec) {\n        var height = textHeights[fontSpec];\n        if (height == undefined) {\n            if (WORKER_OFFSCREEN_CANVAS) {\n                var font = getFontParameters(fontSpec);\n                var metrics = measureText(fontSpec, 'Žg');\n                var lineHeight = isNaN(Number(font.lineHeight))\n                    ? 1.2\n                    : Number(font.lineHeight);\n                height =\n                    lineHeight *\n                        (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\n            }\n            else {\n                if (!div) {\n                    div = document.createElement('div');\n                    div.innerHTML = 'M';\n                    div.style.margin = '0 !important';\n                    div.style.padding = '0 !important';\n                    div.style.position = 'absolute !important';\n                    div.style.left = '-99999px !important';\n                }\n                div.style.font = fontSpec;\n                document.body.appendChild(div);\n                height = div.offsetHeight;\n                document.body.removeChild(div);\n            }\n            textHeights[fontSpec] = height;\n        }\n        return height;\n    };\n})();\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {TextMetrics} Text metrics.\n */\nfunction measureText(font, text) {\n    if (!measureContext) {\n        measureContext = createCanvasContext2D(1, 1);\n    }\n    if (font != measureFont) {\n        measureContext.font = font;\n        measureFont = measureContext.font;\n    }\n    return measureContext.measureText(text);\n}\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {number} Width.\n */\nexport function measureTextWidth(font, text) {\n    return measureText(font, text).width;\n}\n/**\n * Measure text width using a cache.\n * @param {string} font The font.\n * @param {string} text The text to measure.\n * @param {Object<string, number>} cache A lookup of cached widths by text.\n * @returns {number} The text width.\n */\nexport function measureAndCacheTextWidth(font, text, cache) {\n    if (text in cache) {\n        return cache[text];\n    }\n    var width = measureTextWidth(font, text);\n    cache[text] = width;\n    return width;\n}\n/**\n * @param {string} font Font to use for measuring.\n * @param {Array<string>} lines Lines to measure.\n * @param {Array<number>} widths Array will be populated with the widths of\n * each line.\n * @return {number} Width of the whole text.\n */\nexport function measureTextWidths(font, lines, widths) {\n    var numLines = lines.length;\n    var width = 0;\n    for (var i = 0; i < numLines; ++i) {\n        var currentWidth = measureTextWidth(font, lines[i]);\n        width = Math.max(width, currentWidth);\n        widths.push(currentWidth);\n    }\n    return width;\n}\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} offsetX X offset.\n * @param {number} offsetY Y offset.\n */\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\n    if (rotation !== 0) {\n        context.translate(offsetX, offsetY);\n        context.rotate(rotation);\n        context.translate(-offsetX, -offsetY);\n    }\n}\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\n * @param {number} opacity Opacity.\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\n * @param {number} originX Origin X.\n * @param {number} originY Origin Y.\n * @param {number} w Width.\n * @param {number} h Height.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {import(\"../size.js\").Size} scale Scale.\n */\nexport function drawImageOrLabel(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {\n    context.save();\n    if (opacity !== 1) {\n        context.globalAlpha *= opacity;\n    }\n    if (transform) {\n        context.setTransform.apply(context, transform);\n    }\n    if ( /** @type {*} */(labelOrImage).contextInstructions) {\n        // label\n        context.translate(x, y);\n        context.scale(scale[0], scale[1]);\n        executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\n    }\n    else if (scale[0] < 0 || scale[1] < 0) {\n        // flipped image\n        context.translate(x, y);\n        context.scale(scale[0], scale[1]);\n        context.drawImage(\n        /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (labelOrImage), originX, originY, w, h, 0, 0, w, h);\n    }\n    else {\n        // if image not flipped translate and scale can be avoided\n        context.drawImage(\n        /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (labelOrImage), originX, originY, w, h, x, y, w * scale[0], h * scale[1]);\n    }\n    context.restore();\n}\n/**\n * @param {Label} label Label.\n * @param {CanvasRenderingContext2D} context Context.\n */\nfunction executeLabelInstructions(label, context) {\n    var contextInstructions = label.contextInstructions;\n    for (var i = 0, ii = contextInstructions.length; i < ii; i += 2) {\n        if (Array.isArray(contextInstructions[i + 1])) {\n            context[contextInstructions[i]].apply(context, contextInstructions[i + 1]);\n        }\n        else {\n            context[contextInstructions[i]] = contextInstructions[i + 1];\n        }\n    }\n}\n/**\n * @type {HTMLCanvasElement}\n * @private\n */\nvar createTransformStringCanvas = null;\n/**\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @return {string} CSS transform.\n */\nexport function createTransformString(transform) {\n    if (WORKER_OFFSCREEN_CANVAS) {\n        return toString(transform);\n    }\n    else {\n        if (!createTransformStringCanvas) {\n            createTransformStringCanvas = createCanvasContext2D(1, 1).canvas;\n        }\n        createTransformStringCanvas.style.transform = toString(transform);\n        return createTransformStringCanvas.style.transform;\n    }\n}\n//# sourceMappingURL=canvas.js.map","/**\n * @module ol/proj/Units\n */\n/**\n * Projection units: `'degrees'`, `'ft'`, `'m'`, `'pixels'`, `'tile-pixels'` or\n * `'us-ft'`.\n * @enum {string}\n */\nvar Units = {\n    /**\n     * Degrees\n     * @api\n     */\n    DEGREES: 'degrees',\n    /**\n     * Feet\n     * @api\n     */\n    FEET: 'ft',\n    /**\n     * Meters\n     * @api\n     */\n    METERS: 'm',\n    /**\n     * Pixels\n     * @api\n     */\n    PIXELS: 'pixels',\n    /**\n     * Tile Pixels\n     * @api\n     */\n    TILE_PIXELS: 'tile-pixels',\n    /**\n     * US Feet\n     * @api\n     */\n    USFEET: 'us-ft',\n};\n/**\n * Meters per unit lookup table.\n * @const\n * @type {Object<Units, number>}\n * @api\n */\nexport var METERS_PER_UNIT = {};\n// use the radius of the Normal sphere\nMETERS_PER_UNIT[Units.DEGREES] = (2 * Math.PI * 6370997) / 360;\nMETERS_PER_UNIT[Units.FEET] = 0.3048;\nMETERS_PER_UNIT[Units.METERS] = 1;\nMETERS_PER_UNIT[Units.USFEET] = 1200 / 3937;\nexport default Units;\n//# sourceMappingURL=Units.js.map"],"sourceRoot":""}